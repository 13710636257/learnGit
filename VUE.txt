VUE全家桶：
1、Vue-cli项目构建工具
2、vue-router路由
3、vuex状态管理
4、axios http请求工具
6、webpack

 一、SPA 单页面应用和多页面应用的优缺点
 1、SPA页面仅在web页面初始化时加载相应的html、javascript和css，一旦页面加载完成，不会因为用户的操作而重新刷新和跳转，
 而是用路由机制实现html内容切换，ui与用户交互，避免了页面重新加载
 优点就是 1、用户体验好，快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和渲染，页面切换快
 2、前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；
 缺点就是 1、初次加载耗时多，SEO难度较大，
 因为搜索引擎只认识html里面的内容，不认识js里面的内容，而单页面应用的内容都是靠js渲染生成出来的，搜索引擎不识别这部分内容

多页面应用
优点就是首屏时间快 、搜索引擎优化效果好
缺点就是页面切换比较慢  因为每次跳转都需要发出一个http请求，如果网络比较慢，在页面之间来回跳转时，就会出现卡顿

衍生如何解决单页及多页面各自优点的问题
服务端渲染



二、什么是 MVVM？
MVVM(Model-View-ViewModel)是一种软件架构设计模式,是由经典的软件架构MVC衍生而来的，MVVM的出现促进了前端开发与后端业务逻辑的分离，极大的提高了前端开发的效率。
MVVM的核心是ViewModel层, ViewModel相当于一个中转站，负责转换model中的数据对象来让数据变得更容易管理和使用，该层向上与视图双向绑定数据，
向下与model层通过接口进行数据交互，起呈上启下作用。
View是视图层，也就是页面,前端主要由 HTML 和 CSS 来构建 。
Model 是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控，对于前端来说就是后端提供的 api 接口。
ViewModel：view与model沟通的桥梁，负责监听view或Model的修改,是实现MVVM双向绑定的要点

三、Vuex是什么？( 适用于父子、隔代、兄弟组件通信)
vuex是一个专门为vue.js应用程序开发的状态管理模式，每一个Vuex应用的核心就是store，store基本上就是一个容器，它包含着你的应用中大部分的状态（state）
vuex的状态存储它是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。
改变store中的状态唯一的的途径就是显示的提交（commit)mutation,这样能使得我们可以方便的跟踪每一个状态的变化。

主要包括以下几个模块：
State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。
Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。
Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。
Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。
Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。
场景应用有：单页面应用中，组件之间的状态，音乐播放、登入状态、加入购物车等


四、Vue懒加载
3种方式：vue异步组件、webpack 中提供了 require.ensure()来实现按需加载，es6提案的import()

五、谈谈对<keep-alive>的了解
keep-alive是Vue提供的一个抽象组件，用来对组件进行缓存、从而节省性能，可以使被包含的组件保留状态，避免重新渲染，
一般结合路由和动态组件一起使用，提供 include 和 exclude 属性
对应的生命周期是activated和deactivated，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。

六、子组件中data为什么是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？
因为组件是用来复用的，js的对象是引用关系，如果组件中的data是一个对象的话，那么作用域是没有隔离的，子组件中data属性值会相互影响
如果组件中的data选项是一个函数，那么每个实例就可以维护一份被返回的对象的独立拷贝，组件之间的data属性值不会相互影响
而new Vue的实例，是不会被复用的，因此不存在引用对象的问题

七、Vue中为什么需要指令？
根本原因是Vue是数据驱动，在vue中我们需要指令把上下文的数据渲染到DOM中，Vue 通过指令来渲染模板
指令存在的一个明显的优点是，可以把对DOM的一些通过逻辑进行封装，从而使代码逻辑更加规范。即，组件只负责处理数据，而指令负责处理DOM。
对DOM进行底层操作

八、Vue是如何实现数据双向绑定的？


九、Vue Router 的params和query传参的使用和区别 -----参考地址 https://blog.csdn.net/mf_717714/article/details/81945218
首先简单说明下$router与$route的区别
$router：是路由操作对象，只写对象
//操作 路由跳转
this.$router.push({
      name:'hello',
      params:{
          name:'word',
          age:'11'
     }
})
$route:路由信息对象,只读对象
name：this.$route.params.name

传参可以使用params和query两种方式
1、params传递参数:使用params传参只能用name进行引入，如果写成了path，接收参数页面会是undefined
2、使用query传参使用path来引入路由
3、params是路由的一部分,必须要在路由后面添加参数名。query是拼接在url后面的参数，没有也没关系。
4、直白的来说query相当于get请求，页面跳转的时候，可以在地址栏看到请求参数，params相当于post请求，参数不会在地址栏中显示。

十、VUE中的key属性的作用
推荐使用：使用v-for的时候提供key的属性，以获得性能提升，能够高效的更新虚拟DOM
使用key，Vue会基于key的变化重新排列元素顺序，并且会移除key不存在的元素

十一、filter过滤器
作用：被用于一些常见的文本格式化
过滤器可以用在两个地方：双花括号插值和 v-bind 表达式
两种过滤器：1全局过滤器 2局部过滤器
全局过滤器：在任何一个vue实例中都可以使用
局部过滤器：是在某一个vue实例的内容创建的，只在当前实例中起作用


十二、v-on 的修饰符 .native
1，给vue组件绑定事件时候，必须加上native ，不然不会生效（监听根元素的原生事件，使用 .native 修饰符才能触发）
2，等同于在自组件中：
   子组件内部处理click事件然后向外发送click事件：$emit("click".fn)
   
十三、VUE中$refs的基本用法
1、ref加在普通元素上，用this.$refs.（ref值） 获取到的是dom元素

十四、监听数据的变化-watch
watch是一个对象，键是需要观察的表达式，值是对应的回调函数
作用：当表达式的值发生变化后，会调用对应的回调函数来完成响应的监听操作

十五、computed 和 watch 的区别和运用的场景
computed：计算属性，依赖其他属性值，并且computed的值有缓存，只有他依赖的属性值发生改变时才会重新求值
watch：更多的是【观察】的作用，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作
运用场景：
当我们需要进行数值计算时，并且依赖于其他数据时，应该使用 computed，因为可以利用computed的缓存特性，避免每次获取值时都要重新计算

当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，
使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。

十六、Vue生命周期
vue实例有一个完整的生命周期，从开始创建、初始化数据、编译模板、挂载DOM、渲染，更新、渲染，卸载等一系列的过程，vue实例从创建到销毁的过程，我们称这就是生命周期。
vue生命周期的作用：让我们在控制整个vue实例的过程中更容易形成好的逻辑

beforeCreated()：在实例创建之间执行，数据未加载状态。
created()：在实例创建、数据加载后，能初始化数据，DOM 渲染之前执行。
beforeMount()：虚拟 DOM 已创建完成，在数据渲染前最后一次更改数据。
mounted()：页面、数据渲染完成，真实 DOM 挂载完成。
beforeUpadate()：重新渲染之前触发。
updated()：数据已经更改完成，DOM 也重新 render 完成，更改数据会陷入死循环。
beforeDestory() 和 destoryed()：前者是销毁前执行（实例仍然完全可用），后者则是销毁后执行。

十七、在哪个生命周期内调用异步请求？
可以在钩子函数created、beforeMount、mounted进行调用，因为在这三个钩子函数中，data已经创建，可以将服务器端的数据进行赋值
但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：
1、能更快获取到服务端数据，减少页面 loading 时间；
2、ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；

十八、v-model的原理
我们在vue项目中主要用v-model指令在表单 input、textarea、select等元素上创建双向数据绑定，v-model本质上不过是语法糖
v-model在内部为不同的输入元素，使用不同的属性并抛出不同的事件:
	text和textarea元素使用value属性和input事件
	checkbox 和 radio 使用 checked 属性和 change 事件
	select 字段将 value 作为 prop 并将 change 作为事件
	
	<input v-model='something'>
	相当于
	<input v-bind:value="something" v-on:input="something = $event.target.value">
	如果在自定义组件中使用 v-model，v-model 默认会利用名为 value 的 prop 和名为 input 的事件

十九、Vue 组件间通信有哪几种方式？
Vue的组件通信主要有三类：父子组件通信、兄弟组件通信、隔代组件通信
1、props/$emit 适用父子组件通信
2、$parent / $children：访问父 / 子实例  适用于父子组件通信
3、EventBus($emit/$on) 中央事件总线bus 适用于 父子、隔代、兄弟组件通信
这种方法通过创建一个空的vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件之间的通信
4、Vuex 适用于 父子、隔代、兄弟组件通信
5、$attrs/$listeners 适用于 隔代组件通信

二十、vue-router 有哪几种导航钩子?
vue-router提供的导航守卫主要用来通过跳转或取消的方式来守卫导航。
有多种机会植入路由导航过程中：全局的、单个路由独享的、或者组件级的。
全局导航钩子
router.beforeEach(to, from, next);//全局前置守卫
router.beforeResolve(to, from, next)//全局解析守卫
router.afterEach((to, from)//q全局后置守卫
路由独享守卫
beforeEnter: (to, from, next)

组件内的守卫
beforeRouteEnter
beforeRouteUpdate (2.2 新增)
beforeRouteLeave

二十一、vue-router路由模式有几种？
3种路由模式：hash、history、


二、是否需要服务端渲染（SSR)
很多网站之所以使用ssr，主要目的是做搜索引擎优化(SEO)，还有第二个原因是通过SSR减少请求量和客户端渲染可以相对快速的看到内容

服务端渲染：渲染过程在服务器端完成，最终的渲染结果html页面通过Http协议发送个客户端，
			对于客户端而言，只是看到了最终的html页面，看不到数据，也看不到模板。

服务端渲染的优势就是容易SEO，首屏加载快，SSR直接由服务端渲染好页面之间返回显示，无需等待下载js文件再去渲染，所以ssr有更快的内容到达时间。
但是缺点也很明显：渲染过程在后端完成，那么肯定会耗费后端资源。费流量，即使局部页面的变化也需要重新发送整个页面

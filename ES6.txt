ES6更新的内容主要有以下几点：
表达式：声明、解构赋值
内置对象：字符串扩展，数值扩展，对象扩展，数组扩展，函数扩展，正则扩展，Symbol，Set，Map，Proxy、Reflect
语句与运算：Class、Module、Iterator
异步编程：Promise、Generator、Async

一、声明
	
	let命令：1、let声明的变量拥有块级作用域 2、let声明的全局变量不是全局对象的属性
		3、let重定义变量会抛出一个语法错误 4、不存在变量提升
	const命令：const除了具有let的块级作用域和不会变量提升外，还有就是它定义的是常量，
		   在用const定义变量后，我们就不能修改它了，对变量的修改会抛出异常。
	
	作用域
	全局作用域
	函数作用域 function(){}
	块级作用域：{}
	
	作用范围
	var命令在全局代码中执行
	const和let只能在代码块中使用，
	
	重点难点
	未定义就使用会报错，const和let不存在变量提升
	暂时性死区：在代码块内使用let命令，声明变量之前，该变量都不可用
	
二、变量的解构赋值
从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。
	1、数组的解构赋值
		规则：数据结构具有Iterator接口，可采用数组形式的解构赋值
		形式：const [x,y] = [1,2]
		默认：const [x,y=2] = [1]
	
	2、对象的解构赋值
		形式：const {x,y} = {x:1,y:2}
		默认：const {x,y=2} = {x:1}
		改名：const {x,y=z} = {x:1,y:2}
	3、字符串的解构赋值：const[a,b,c,d,e] = "hello"
	4、数值解构：const {toString:s} = 123
	5、布尔值解构:const {toString:b} = true
	
	6、函数参数的解构
		数组解构：function fun([x=0,y=1]) {}
		对象解构：function fun({x=0,y=1} = {}){}
	
	应用场景
	交换变量值：[x,y] = [y,x]
	返回函数多个值：const [x,y,z] = Func()
	定义函数参数：Func([1, 2])
	提取JSON数据 ：const {name,age} = person
	定义函数参数默认值：function Func({ x = 1, y = 2 } = {}) {}

	重点难点
	匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值
	解构赋值的规则：只要等号右边的值不是对象或数组，就先将其转化为对象
	解构遵循匹配模式
	解构不成功时变量的值等于undefined
	undefined和null无法转为对象，因此无法进行解构
	
三 、数组的扩展
	扩展运算符(...):转换数组为逗号分隔的参数序列([...arr]),相当于rest参数的逆运算 ,该运算符将一个数组变为参数序列
		//扩展运算符的应用
                该运算符主要用于函数的调用
		const add = function (a,b) {
			return a+b
		}
		const numbers = [1,2]
		console.log(add(...numbers));
		console.log(...[1,3,4]);
	
//		复制数组
		const a1 = [1,2,3];
		const a2 = [...a1];
		a2[0] = 0
		console.log(a2) //[0,2, 3]
//		合并数组
//		[...arr1, ...arr2, ...arr3]
//		与解构赋值结合 如果将扩展运算符用于数组赋值,只能放在参数的最后一位,不然会报错
		const [first, ...rest] = [1, 2, 3, 4, 5];
			//first // 1
			//rest  // [2, 3, 4, 5]
		
				
	Array.from():转换具有Iterator接口的数据结构为真正的数组，返回新数组
		类数组对象：包含length的对象，函数内部Arguments对象、NodeList对象
		可遍历对象：String、Set结构、Map结构、Generator函数

四、函数的扩展
    1、函数的参数默认值 ：为函数参数指定默认值
         形式：function sum(x=1,y=2){}

五、Class
	Intro:对于面向对象编程而言，更关注类的声明，属性方法，静态方法，继承、多态，私有属性
	定义：对一类具有共同特征事物的抽象（构造函数的语法糖）
	原理：类本身指向构造函数，所有方法定义在prototype上，可看作构造函数的另一种写法(Class === Class.prototype.constructor)


五、异步操作
 一，Promise (一种异步编程的解决方案）
       主要就是为了解决“回调地狱”问题的，它可以将异步操作的处理变得很优雅
       声明：new Promise((resolve, reject) => {})
       状态：
	进行中：pending
	已成功：resolved
	已失败：rejected
       特点：
	1、对象的状态不受外界影响
	2、一旦状态改变就不会再变，任何时候都可得到这个结果
       出参：
	resolve：将状态从未完成变为成功，在异步操作成功时调用，并将异步操作的结果作为参数传递出去
	reject：将状态从未完成变为失败，在异步操作失败时调用，并将异步操作的错误作为参数传递出去
       方法：
	then()：分别指定resolved状态和rejected状态的回调函数
	第一参数：状态变为resolved时调用
	第二参数：状态变为rejected时调用(可选)
	catch()：指定发生错误时的回调函数
	Promise.all()：将多个实例包装成一个新实例，返回全部实例状态变更后的结果数组(齐变更再返回)
	  入参：具有Iterator接口的数据结构
	 成功：只有全部实例状态变成resolved，最终状态才会变成resolved
	 失败：其中一个实例状态变成rejected，最终状态就会变成rejected
	 


 二、Async
	定义：使异步函数以同步函数的形式书写(Generator函数+promise语法糖)；返回值是Promise对象
	声明：
		1、具名函数：async function Fun () {}
		2、函数表达式：const Fun = async function () {}
		3、箭头函数：const Fun = async() => {}
		4、对象方法：const obj = { async func() {} }
		5、类方法：class Cla { async Func() {} }
	await命令：等待当前Promise对象变更完毕
		正常情况：后面是Promise对象则返回其结果，否则返回对应的值
		后随Thenable对象：将其等同于Promise对象返回其结果
	处理错误：将await命令Promise对象放到try-catch中
	
	应用场景：按顺序完成异步操作
	重点难点：
		1、Async返回的是Promise对象，可使用then()方法添加回调函数
		2、内部return返回值会成为后续then()的出参
		3、内部抛出错误会导致返回的Promise对象变为rejected状态，被catch()接收到
		4、返回的Promise对象必须等到内部所有await命令Promise对象执行完才会发生状态改变，除非遇到return语句或抛出错误
		5、任何一个await命令Promise对象变为rejected状态，整个Async函数都会中断执行
		6、希望即使前一个异步操作失败也不要中断后面的异步操作
			将await命令Promise对象放到try-catch中
			await命令Promise对象跟一个catch()
			 
	
	
六、Proxy 
	作用：它可以自定义一些常用行为如查找，赋值、枚举、函数调用等,通过 Proxy 这个名称也可以看出来它包含了“代理”的含义，
		只要有“代理”的诉求都可以考虑使用 Proxy 来实现。
	定义：用于修改某些操作的默认行为
	声明：const proxy = new Proxy(target,handle)
	入参：
		target:拦截的目标对象(代理的目标对象）
		handle：定制拦截行为
		
七、Iterator
	定义：为各种不同的数据结构提供统一的访问机制



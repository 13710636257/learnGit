ES6更新的内容主要有以下几点：
表达式：声明、解构赋值
内置对象：字符串扩展，数值扩展，对象扩展，数组扩展，函数扩展，正则扩展，Symbol，Set，Map，Proxy、Reflect
语句与运算：Class、Module、Iterator
异步编程：Promise、Generator、Async

一、声明
	const命令：声明常量，声明后必须立马赋值，不能重复赋值
	let命令：声明变量，声明变量后可立马赋值或使用时赋值
	
	作用域
	全局作用域
	函数作用域 function(){}
	块级作用域：{}
	
	作用范围
	var命令在全局代码中执行
	const和let只能在代码块中使用
	
	重点难点
	未定义就使用会报错，const和let不存在变量提升
	暂时性死区：在代码块内使用let命令，声明变量之前，该变量都不可用
	
二、变量的解构赋值
从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。
	1、数组的解构赋值
		规则：数据结构具有Iterator接口，可采用数组形式的解构赋值
		形式：const [x,y] = [1,2]
		默认：const [x,y=2] = [1]
	
	2、对象的解构赋值
		形式：const {x,y} = {x:1,y:2}
		默认：const {x,y=2} = {x:1}
		改名：const {x,y=z} = {x:1,y:2}
	3、字符串的解构赋值：const[a,b,c,d,e] = "hello"
	4、数值解构：const {toString:s} = 123
	5、布尔值解构:const {toString:b} = true
	
	6、函数参数的解构
		数组解构：function fun([x=0,y=1]) {}
		对象解构：function fun({x=0,y=1} = {}){}
	
	应用场景
	交换变量值：[x,y] = [y,x]
	返回函数多个值：const [x,y,z] = Func()
	定义函数参数：Func([1, 2])
	提取JSON数据 ：const {name,age} = person
	定义函数参数默认值：function Func({ x = 1, y = 2 } = {}) {}

	重点难点
	匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的值
	解构赋值的规则：只要等号右边的值不是对象或数组，就先将其转化为对象
	解构遵循匹配模式
	解构不成功时变量的值等于undefined
	undefined和null无法转为对象，因此无法进行解构
	
三 、数组的扩展
	扩展运算符(...):转换数组为逗号分隔的参数序列([...arr]),相当于rest参数的逆运算 ,该运算符将一个数组变为参数序列
	
	Array.from():转换具有Iterator接口的数据结构为真正的数组，返回新数组
		类数组对象：包含length的对象，函数内部Arguments对象、NodeList对象
		可遍历对象：String、Set结构、Map结构、Generator函数
